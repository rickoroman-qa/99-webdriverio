"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artifact = void 0;
const tiny_types_1 = require("tiny-types");
const errors_1 = require("../errors");
const artifacts = __importStar(require("./artifacts"));
/**
 * @extends {tiny-types~TinyType}
 */
class Artifact extends tiny_types_1.TinyType {
    base64EncodedValue;
    static fromJSON(o) {
        const recognisedTypes = Object.keys(artifacts), type = Artifact.ofType(o.type);
        if (!type) {
            throw new errors_1.LogicError(`
                Couldn't de-serialise artifact of an unknown type.
                ${o.type} is not one of the recognised types: ${recognisedTypes.join(', ')}
           `);
        }
        return new type(o.base64EncodedValue);
    }
    static ofType(name) {
        const types = Object.keys(artifacts), type = types.find(constructorName => constructorName === name);
        return artifacts[type];
    }
    constructor(base64EncodedValue) {
        super();
        this.base64EncodedValue = base64EncodedValue;
        (0, tiny_types_1.ensure)(this.constructor.name, base64EncodedValue, (0, tiny_types_1.isDefined)(), (0, tiny_types_1.isString)(), looksLikeBase64Encoded());
    }
    // todo: serialise on call
    toJSON() {
        return ({
            type: this.constructor.name,
            base64EncodedValue: this.base64EncodedValue,
        });
    }
}
exports.Artifact = Artifact;
function looksLikeBase64Encoded() {
    const regex = /^[\d+/=A-Za-z]+$/;
    return tiny_types_1.Predicate.to(`be base64-encoded`, (value) => regex.test(value));
}
//# sourceMappingURL=Artifact.js.map